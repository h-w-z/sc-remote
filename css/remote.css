/* ==========================================================================
   Normalize.scss settings
   ========================================================================== */
/**
 * Includes legacy browser support IE6/7
 *
 * Set to false if you want to drop support for IE6 and IE7
 */
/* Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 * 3. Corrects text resizing oddly in IE 6/7 when body `font-size` is set using
 *  `em` units.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio, canvas, progress, video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevents modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden], template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b, strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Addresses styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * 1. Remove border when inside `a` element in IE 8/9/10.
 * 2. Improves image quality when scaled in IE 7.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */
code, kbd, pre, samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *  Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 * 4. Improves appearance and consistency in all browsers.
 */
button, input, optgroup, select, textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button, select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *  and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *  `input` and others.
 * 4. Removes inner spacing in IE 7 without affecting normal text inputs.
 *  Known issue: inner spacing remains in IE 6.
 */
button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled], html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 *  Known issue: excess padding remains in IE 6.
 */
input[type="checkbox"], input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 * 3. Corrects text not wrapping in Firefox 3.
 * 4. Corrects alignment displayed oddly in IE 6/7.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td, th {
  padding: 0; }

.icon.icon-search:before {
  content: '\26B2';
  display: inline-block;
  -webkit-transform: rotate(45deg);
      -ms-transform: rotate(45deg);
          transform: rotate(45deg);
  font-weight: bold;
  font-size: 1.3em; }
.icon.icon-previous:before {
  content: '\25BA\25BA';
  display: inline-block;
  -webkit-transform: rotate(180deg);
      -ms-transform: rotate(180deg);
          transform: rotate(180deg); }
.icon.icon-play:before {
  content: '\25BA'; }
.icon.icon-pause:before {
  content: '\2590\2590'; }
.icon.icon-next:before {
  content: '\25BA\25BA'; }

body {
  font-family: sans-serif; }

img, video {
  display: inline-block;
  height: auto;
  max-width: 100%; }

figure {
  width: 100%; }
  figure > img {
    display: block; }

button {
  border: none;
  background: transparent; }

button:focus {
  outline: none; }

html, body {
  height: 100%;
  margin: 0; }

body.startscreen header {
  top: 50%;
  margin-top: -3.5vh;
  font-size: 2em; }
body.startscreen footer {
  bottom: -18vmin; }

main.content {
  padding: 7vh 0 18vmin; }

header {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 999;
  min-height: 7vh;
  box-sizing: border-box;
  margin-top: 0;
  padding: 0 2em;
  -webkit-transition: 1s all ease;
          transition: 1s all ease; }
  header input {
    border-color: transparent; }
    header input:focus {
      outline: none; }
  body:not(.startscreen) header {
    box-shadow: 0 3px 10px 0 rgba(0, 0, 0, 0.2);
    background: rgba(255, 255, 255, 0.96); }

footer {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
          justify-content: space-between;
  box-sizing: border-box;
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 999;
  min-height: 18vmin;
  padding: 3vh 10vw 2vh;
  -webkit-transition: 1s bottom ease;
          transition: 1s bottom ease;
  box-shadow: 0 -3px 10px 0 rgba(0, 0, 0, 0.2);
  background: rgba(255, 255, 255, 0.96); }
  footer > div {
    -webkit-box-flex: 0;
    -webkit-flex: 0 auto;
        -ms-flex: 0 auto;
            flex: 0 auto; }

.search-bar {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 10vw;
  right: 10vw; }
  .search-bar input {
    -webkit-box-flex: 1;
    -webkit-flex: auto;
        -ms-flex: auto;
            flex: auto; }
  .search-bar button {
    -webkit-box-flex: 0;
    -webkit-flex: 0 10vw;
        -ms-flex: 0 10vw;
            flex: 0 10vw; }

.player-bar {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex; }
  .player-bar button {
    min-height: 2.5em;
    width: 100%; }

.volume-bar input[type=range] {
  width: 100%;
  min-height: 2em; }

.search-results ul {
  padding: 0;
  margin: 0;
  list-style-type: none;
  max-width: 100%; }
  .search-results ul li {
    padding: 1em;
    text-overflow: ellipsis;
    overflow: hidden;
    max-width: 100%;
    cursor: pointer;
    -webkit-transition: padding .3s ease;
            transition: padding .3s ease; }
    .search-results ul li:nth-child(odd) {
      background: #f70;
      color: white; }
    .search-results ul li:nth-child(even) {
      color: #f70; }
    .search-results ul li:hover {
      text-decoration: underline; }

.search-item {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex; }
  .search-item .left-col {
    -webkit-box-flex: 4;
    -webkit-flex: 4;
        -ms-flex: 4;
            flex: 4; }
    @media screen and (orientation: landscape) and (max-height: 400px) {
      .search-item .left-col {
        display: none; } }
    @media screen and (min-width: 500px) {
      .search-item .left-col {
        -webkit-box-flex: 3;
        -webkit-flex: 3;
            -ms-flex: 3;
                flex: 3; } }
    @media screen and (min-width: 750px) {
      .search-item .left-col {
        -webkit-box-flex: 2;
        -webkit-flex: 2;
            -ms-flex: 2;
                flex: 2; } }
  .search-item .right-col {
    -webkit-box-flex: 10;
    -webkit-flex: 10;
        -ms-flex: 10;
            flex: 10;
    padding: 0 1em; }
    @media screen and (orientation: landscape) and (max-height: 400px) {
      .search-item .right-col {
        text-align: left; }
        .search-item .right-col h1, .search-item .right-col h4 {
          display: inline-block;
          padding-right: 0.3em; } }
  .search-item figure {
    text-align: center;
    white-space: nowrap;
    height: 100%;
    margin: 0;
    padding: 0; }
    .search-item figure:before, .search-item figure > div.layer {
      display: inline-block;
      white-space: normal;
      vertical-align: middle; }
    .search-item figure:before {
      content: '';
      height: 100%;
      width: 0; }
    .search-item figure > div.layer {
      width: 100%;
      margin-left: -100%; }
      .search-item figure > div.layer:first-child {
        margin-left: 0; }
    .search-item figure .play-control {
      display: inline-block;
      box-sizing: content-box;
      width: 5vmin;
      height: 5vmin;
      padding: 2.5vmin;
      text-align: center;
      border: .5vmin solid white;
      border-radius: 100%;
      background: rgba(128, 128, 128, 0.3);
      box-shadow: .3vmin .3vmin .75vmin 0px rgba(0, 0, 0, 0.5);
      opacity: .85; }
      .search-item figure .play-control:before {
        content: '';
        display: inline-block;
        box-sizing: content-box;
        -webkit-transition: .5s all ease;
                transition: .5s all ease;
        cursor: pointer;
        -webkit-user-select: none;
           -moz-user-select: none;
            -ms-user-select: none;
                user-select: none;
        border-color: transparent;
        border-left-color: #fff;
        border-style: solid; }
      .search-item figure .play-control:before, .search-item figure .play-control.paused:before {
        width: 0;
        height: 0;
        border-left-width: 5vmin;
        border-right-width: 0;
        border-bottom-width: 2.5vmin;
        border-top-width: 2.5vmin; }
      .search-item figure .play-control.playing:before {
        width: 1.25vmin;
        height: 5vmin;
        border-right-color: #fff;
        border-left-width: 1.66667vmin;
        border-right-width: 1.66667vmin;
        border-top-width: 0;
        border-bottom-width: 0; }


/*# sourceMappingURL=data:application/json;base64, */